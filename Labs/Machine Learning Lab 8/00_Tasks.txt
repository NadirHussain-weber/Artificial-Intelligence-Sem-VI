Tasks to do:

1. Learn to balance data (https://towardsdatascience.com/how-to-effortlessly-handle-class-imbalance-with-python-and-smote-9b715ca8e5a7)

from imblearn.over_sampling import SMOTE 
sm = SMOTE(random_state=42)
X_sm, y_sm = sm.fit_resample(X, y)
print(f'''Shape of X before SMOTE: {X.shape}
Shape of X after SMOTE: {X_sm.shape}''')

2. Apply label encoder

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

3. Apply multiple classifiers to classify data

#from sklearn.neighbors import KNeighborsClassifier
#from sklearn.discriminant_analysis import LinearDiscriminantAnalysis 
#from sklearn.metrics import confusion_matrix, accuracy_score
#from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
#from sklearn.svm import SVC
#from sklearn.linear_model import LogisticRegression

#classifier = KNeighborsClassifier(n_neighbors=5)
#classifier = LinearDiscriminantAnalysis()
classifier = DecisionTreeClassifier()
#classifier = SVC(gamma = 'auto')
#classifier = LogisticRegression()

# Fitting the model
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred2 = classifier.predict(X_test)
print(y_pred2)